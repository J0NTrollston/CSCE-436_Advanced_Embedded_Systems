/*--------------------------------------------------------------------
-- Name:	Brandon S. Ramos
-- Date:	3/15/2021
-- Course: 	CSCE 436: Advanced Embedded Systems
-- File: 	Lab3.c
-- Project: Lab 3: Software control of a datapath
-- Pupr:	MicroBlaze c code for Lab 3
--
-- Documentation:	Reveived help by Prof. Falkinburg
--                                   TA Jacob Fox
--
-- Academic Integrity Statement: I certify that, while others may have
-- assisted me in brain storming, debugging and validating this program,
-- the program itself is my own work. I understand that submitting code
-- which is the work of other individuals is a violation of the honor
-- code.  I also understand that if I knowingly give my original work to
-- another individual is also a violation of the honor code.
-------------------------------------------------------------------------*/
/***************************** Include Files ********************************/

#include "xparameters.h"
#include "stdio.h"
#include "xstatus.h"

#include "platform.h"
#include "xil_printf.h"						// Contains xil_printf
#include <xuartlite_l.h>					// Contains XUartLite_RecvByte
#include <xil_io.h>							// Contains Xil_Out8 and its variations
#include <xil_exception.h>

/************************** Constant Definitions ****************************/

/*
 * The following constants define the slave registers used for our Counter PCORE
 */
#define countBase		0x44a00000
//#define countQReg		countBase			// 8 LSBs of slv_reg0 read=Q, write=D
//#define	countCtrlReg	countBase+0x4			// 2 LSBs of slv_reg1 are control
//#define	countRollReg	countBase+0x8			// 1 LSBs of slv_reg2 for roll flag
#define	countClearReg	countBase+0xc		// 1 LSBs of slv_reg3 (0) roll clear flag
#define	reg4			countBase+0x10
#define	flagReg			countBase+0x14		//3 LSBs os slv_reg5 are ready, v_sync and max_count
#define	exSel			countBase+0x18		//1 LSBs of slv_reg6 is for exSel
#define	triggerTimeReg	countBase+0x1c		//10 LSBs of slv_reg7 is triggerTime
#define	triggerVoltReg 	countBase+0x20      //10 LSBs of slv_reg8 is triggerVolt
#define	reg9	countBase+0x24


/*
 * The following constants define the Counter commands
 */
//#define count_HOLD		0x00		// The control bits are defined in the VHDL
//#define	count_COUNT		0x01		// code contained in lec18.vhdl.  They are
//#define	count_LOAD		0x02		// added here to centralize the bit values in
//#define count_RESET		0x03		// a single place.

#define printf xil_printf			/* A smaller footprint printf */

#define	uartRegAddr			0x40600000		// read <= RX, write => TX
//#define Lab2InternalEnableDisable 0;

/************************** Function Prototypes ****************************/
//void myISR(void);

/************************** Variable Definitions **************************/
/*
 * The following are declared globally so they are zeroed and so they are
 * easily accessible from a debugger
 */

//u16 isrCount = 0;
char Lab2InternalEnableDisable = 0;
u16 triggerVolt = 220;
u16 triggerTime = 320;

int main(void) {

	unsigned char c;

	init_platform();

	print("Welcome to Lab 3!\n\r");

//    microblaze_register_handler((XInterruptHandler) myISR, (void *) 0);
//    microblaze_enable_interrupts();
//
//    Xil_Out8(countClearReg, 0x01);					// Clear the flag and then you MUST
//	Xil_Out8(countClearReg, 0x00);					// allow the flag to be reset later

    while(1) {

    	c=XUartLite_RecvByte(uartRegAddr);

		switch(c) {

    		/*-------------------------------------------------
    		 * Reply with the help menu
    		 *-------------------------------------------------
			 */
    		case '?':
    			printf("--------------------------\r\n");
    			printf(" TriggerVolt = %x   TriggerTime = %x\r\n",triggerVolt,triggerTime);
    			printf("	Lab2Internal Functionality = %x\r\n",Xil_In16(Lab2InternalEnableDisable));
//    			printf("	isr count = %x\r\n",isrCount);
//    			printf("	Roll = %x\r\n",Xil_In16(countRollReg));
//    			printf("	Roll = %x\r\n",Xil_In16(countRollReg));

    			printf("--------------------------\r\n");
    			printf("?: help menu\r\n"); //keep
    			printf("o: k\r\n"); //keep
//    			printf("l:   COUNTER	load counter\r\n");
//    			printf("r:   COUNTER	reset counter\r\n");
//    			printf("n:   Clear ISR counter\r\n");
    			printf("w:   Move Trigger Volt Up\r\n");
    			printf("s:   Move Trigger Volt Down\r\n");
    			printf("a:   Move Trigger Time Left\r\n");
    			printf("d:   Move Trigger Time Right\r\n");
    			printf("r:   Reset trigger marks\r\n");
    			printf("i:   Lab 2 Internal Control Enable/Disable");
    			printf("c:   clear terminal\r\n"); //keep
    			printf("--------------------------\r\n");

    			break;

			/*-------------------------------------------------
			 * Basic I/O loopback
			 *-------------------------------------------------
			 */
    		case 'o':
    			printf("k \r\n");
    			break;

			/*-------------------------------------------------
			 * Enable and disable lab 2 internal controls
			 *-------------------------------------------------
			 */
			case 'i':
				if(Lab2InternalEnableDisable == 0){
					Xil_Out8(exSel,1);
					Lab2InternalEnableDisable = 1;

				}else{
					Xil_Out8(exSel,0);
					Lab2InternalEnableDisable = 0;
				}
				break;

			/*-------------------------------------------------
			 * Move triggerVolt mark up
			 *-------------------------------------------------
			 */
			case 'w':
				if(triggerVolt - 10 >= 20){
					triggerVolt -= 10;
					Xil_Out16(triggerVoltReg,triggerVolt);
				}
				break;

//			/*-------------------------------------------------
//			 * Move triggerVolt mark down
//			 *-------------------------------------------------
//			 */
//			case 's':
//				if(triggerVolt + 10 <= 420){
//					triggerVolt += 10;
//					Xil_Out8(TriggerVolt,triggerVolt);
//
//				}
//				break;
//
//			/*-------------------------------------------------
//			 * Move triggerTime mark left
//			 *-------------------------------------------------
//			 */
//			case 'a':
//				if(triggerTime - 10 >= 20){
//					triggerTime -= 10;
//					Xil_Out8(TriggerTime,triggerTime);
//
//				}
//				break;
//
//			/*-------------------------------------------------
//			 * Move triggerTime mark right
//			 *-------------------------------------------------
//			 */
//			case 'd':
//				if(triggerVolt + 10 <= 620){
//					triggerTime += 10;
//					Xil_Out8(TriggerTime,triggerTime);
//				}
//				break;

			/*-------------------------------------------------
			 * Reset trigger marks
			 *-------------------------------------------------
			 */
    		case 'r':
    			triggerTime = 320;
    			triggerVolt = 220;
    			Xil_Out16(triggerVoltReg,triggerVolt);
    			Xil_Out16(triggerTimeReg,triggerTime);
    			break;

			/*-------------------------------------------------
			 * Start the counter to count up
			 *-------------------------------------------------
			 */
//        	case 'm':
//        		Xil_Out8(countCtrlReg,count_COUNT);
//        		break;

			/*-------------------------------------------------
			 * Stop the counter from counting
			 *-------------------------------------------------
			 */
//        	case 'S':
//        		Xil_Out8(countCtrlReg,count_HOLD);
//        		break;

			/*-------------------------------------------------
			 * Tell the counter to load a value
			 *-------------------------------------------------
			 */
//        	case 'l':
//        		printf("Enter a 0-9 value to store in the counter: ");
//            	c=XUartLite_RecvByte(uartRegAddr) - 0x30;
//        		Xil_Out8(countQReg,c);						// put value into slv_reg1
//        		Xil_Out8(countCtrlReg,count_LOAD);			// load command
//    			printf("%c\r\n",c+0x30);
//        		break;

			/*-------------------------------------------------
			 * Reset the counter
			 *-------------------------------------------------
			 */
//            case 'r':
//            	Xil_Out8(countCtrlReg,count_RESET);				// reset command
//            	break;

			/*-------------------------------------------------
			 * Clear the ISR counter
			 *-------------------------------------------------
//			 */
//			case 'n':
//				isrCount = 0;				// clear ISR Count
//				break;

			/*-------------------------------------------------
			 * Clear the terminal window
			 *-------------------------------------------------
			 */
            case 'c':
            	for (c=0; c<40; c++) printf("\r\n");
               	break;

			/*-------------------------------------------------
			 * Unknown character was
			 *-------------------------------------------------
			 */
    		default:
    			printf("unrecognized character: %c\r\n",c);
    			break;
    	} // end case

    } // end while 1

    cleanup_platform();

    return 0;
} // end main


//void myISR(void) {
////	isrCount = isrCount + 1;
//	Xil_Out8(countClearReg, 0x01);					// Clear the flag and then you MUST
//	Xil_Out8(countClearReg, 0x00);					// allow the flag to be reset later
//}
